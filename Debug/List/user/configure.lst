###############################################################################
#
# IAR ANSI C/C++ Compiler V9.32.1.338/W64 for ARM         19/Dec/2022  16:46:57
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\Users\kihae\term_project(3)\user\configure.c
#    Command line      =
#        -f "C:\Users\kihae\term_project(3)\Debug\Obj\user\configure.o.rsp"
#        ("C:\Users\kihae\term_project(3)\user\configure.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        "C:\Users\kihae\term_project(3)\Debug\List\user" -o
#        "C:\Users\kihae\term_project(3)\Debug\Obj\user" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        "C:\Users\kihae\term_project(3)\libraries\CMSIS\DeviceSupport\" -I
#        "C:\Users\kihae\term_project(3)\libraries\CMSIS\DeviceSupport\Startup\"
#        -I
#        "C:\Users\kihae\term_project(3)\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\"
#        -I
#        "C:\Users\kihae\term_project(3)\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\"
#        -I "C:\Users\kihae\term_project(3)\user\" -I
#        "C:\Users\kihae\term_project(3)\user\inc\" -I
#        "C:\Users\kihae\term_project(3)\libraries\LCD\" -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        "C:\Users\kihae\term_project(3)\Debug\Obj\user\configure.o.iar_deps"
#    Locale            =  C
#    List file         =
#        C:\Users\kihae\term_project(3)\Debug\List\user\configure.lst
#    Object file       =
#        C:\Users\kihae\term_project(3)\Debug\Obj\user\configure.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\kihae\term_project(3)\user\configure.c
      1          #include "stm32f10x.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable9
   \       0x14   0xB240             SXTB     R0,R0
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1C   0x4770             BX       LR
      2          #include "stm32f10x_exti.h"
      3          #include "stm32f10x_gpio.h"
      4          #include "stm32f10x_usart.h"
      5          #include "stm32f10x_rcc.h"
      6          #include "stm32f10x_adc.h"
      7          #include "misc.h"
      8          #include "configure.h"
      9          

   \                                 In section .bss, align 4
     10          volatile uint32_t distance[1];
   \                     distance:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     11          volatile uint32_t acc[1];
   \                     acc:
   \        0x0                      DS8 4

   \                                 In section .text, align 2, keep-with-next
     12          void RCC_Configure(void)
     13          {
   \                     RCC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     14            // TODO: Enable the APB2 peripheral clock using the function 'RCC_APB2PeriphClockCmd'
     15            /* UART TX/RX port clock enable */
     16            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2004             MOVS     R0,#+4
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     17            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x2010             MOVS     R0,#+16
   \        0xE   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     18            
     19            RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0xF44F 0x4080      MOV      R0,#+16384
   \       0x18   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     20            RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0xF45F 0x3000      MOVS     R0,#+131072
   \       0x22   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     21          
     22            RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0xF44F 0x7000      MOV      R0,#+512
   \       0x2C   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     23            RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
   \       0x30   0x2101             MOVS     R1,#+1
   \       0x32   0xF44F 0x4000      MOV      R0,#+32768
   \       0x36   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     24            
     25            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     26            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0x2002             MOVS     R0,#+2
   \       0x46   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     27            
     28            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \       0x4A   0x2101             MOVS     R1,#+1
   \       0x4C   0x2001             MOVS     R0,#+1
   \       0x4E   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     29            
     30            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \       0x52   0x2101             MOVS     R1,#+1
   \       0x54   0x2002             MOVS     R0,#+2
   \       0x56   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     31            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \       0x5A   0x2101             MOVS     R1,#+1
   \       0x5C   0x2008             MOVS     R0,#+8
   \       0x5E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     32          }
   \       0x62   0xBD01             POP      {R0,PC}
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void GPIO_Configure(void)
     35          {
   \                     GPIO_Configure: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
     36            GPIO_InitTypeDef GPIO_InitStructure;
     37            
     38           /* UART1 pin setting */
     39            //TX
     40            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \        0x2   0xF44F 0x7000      MOV      R0,#+512
   \        0x6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     41            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0xA   0x2003             MOVS     R0,#+3
   \        0xC   0xF88D 0x0002      STRB     R0,[SP, #+2]
     42            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x10   0x2018             MOVS     R0,#+24
   \       0x12   0xF88D 0x0003      STRB     R0,[SP, #+3]
     43            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x16   0x.... 0x....      LDR.W    R4,??DataTable9_1
   \       0x1A   0x4669             MOV      R1,SP
   \       0x1C   0x0020             MOVS     R0,R4
   \       0x1E   0x.... 0x....      BL       GPIO_Init
     44            //RX
     45            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   \       0x22   0xF44F 0x6080      MOV      R0,#+1024
   \       0x26   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     46            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x2A   0x2003             MOVS     R0,#+3
   \       0x2C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     47            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   \       0x30   0x2028             MOVS     R0,#+40
   \       0x32   0xF88D 0x0003      STRB     R0,[SP, #+3]
     48            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x36   0x4669             MOV      R1,SP
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       GPIO_Init
     49            
     50            /* UART2 pin setting */
     51            //TX
     52            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \       0x3E   0x2004             MOVS     R0,#+4
   \       0x40   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     53            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x44   0x2003             MOVS     R0,#+3
   \       0x46   0xF88D 0x0002      STRB     R0,[SP, #+2]
     54            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x4A   0x2018             MOVS     R0,#+24
   \       0x4C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     55            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x50   0x4669             MOV      R1,SP
   \       0x52   0x0020             MOVS     R0,R4
   \       0x54   0x.... 0x....      BL       GPIO_Init
     56            //RX
     57            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \       0x58   0x2008             MOVS     R0,#+8
   \       0x5A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     58            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x5E   0x2003             MOVS     R0,#+3
   \       0x60   0xF88D 0x0002      STRB     R0,[SP, #+2]
     59            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   \       0x64   0x2028             MOVS     R0,#+40
   \       0x66   0xF88D 0x0003      STRB     R0,[SP, #+3]
     60            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x6A   0x4669             MOV      R1,SP
   \       0x6C   0x0020             MOVS     R0,R4
   \       0x6E   0x.... 0x....      BL       GPIO_Init
     61            
     62            /* TIM2 setting */
     63            // CH2
     64            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
   \       0x72   0x2002             MOVS     R0,#+2
   \       0x74   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     65            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x78   0x2018             MOVS     R0,#+24
   \       0x7A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     66            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x7E   0x2003             MOVS     R0,#+3
   \       0x80   0xF88D 0x0002      STRB     R0,[SP, #+2]
     67            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x84   0x4669             MOV      R1,SP
   \       0x86   0x0020             MOVS     R0,R4
   \       0x88   0x.... 0x....      BL       GPIO_Init
     68            
     69            /* TIM3 setting */
     70            // CH3
     71            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \       0x8C   0x2001             MOVS     R0,#+1
   \       0x8E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     72            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x92   0x2018             MOVS     R0,#+24
   \       0x94   0xF88D 0x0003      STRB     R0,[SP, #+3]
     73            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x98   0x2003             MOVS     R0,#+3
   \       0x9A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     74            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \       0x9E   0x....             LDR.N    R4,??DataTable9_2
   \       0xA0   0x4669             MOV      R1,SP
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x.... 0x....      BL       GPIO_Init
     75            // CH4
     76            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
   \       0xA8   0x2002             MOVS     R0,#+2
   \       0xAA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     77            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0xAE   0x2018             MOVS     R0,#+24
   \       0xB0   0xF88D 0x0003      STRB     R0,[SP, #+3]
     78            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0xB4   0x2003             MOVS     R0,#+3
   \       0xB6   0xF88D 0x0002      STRB     R0,[SP, #+2]
     79            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \       0xBA   0x4669             MOV      R1,SP
   \       0xBC   0x0020             MOVS     R0,R4
   \       0xBE   0x.... 0x....      BL       GPIO_Init
     80            
     81            /* relay setting */
     82            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   \       0xC2   0xF44F 0x7080      MOV      R0,#+256
   \       0xC6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     83            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \       0xCA   0x2010             MOVS     R0,#+16
   \       0xCC   0xF88D 0x0003      STRB     R0,[SP, #+3]
     84            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0xD0   0x2003             MOVS     R0,#+3
   \       0xD2   0xF88D 0x0002      STRB     R0,[SP, #+2]
     85            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \       0xD6   0x....             LDR.N    R4,??DataTable9_3
   \       0xD8   0x4669             MOV      R1,SP
   \       0xDA   0x0020             MOVS     R0,R4
   \       0xDC   0x.... 0x....      BL       GPIO_Init
     86            
     87            /* ADC1 setting */
     88            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \       0xE0   0x2004             MOVS     R0,#+4
   \       0xE2   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     89            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \       0xE6   0x2000             MOVS     R0,#+0
   \       0xE8   0xF88D 0x0003      STRB     R0,[SP, #+3]
     90            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0xEC   0x2003             MOVS     R0,#+3
   \       0xEE   0xF88D 0x0002      STRB     R0,[SP, #+2]
     91            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \       0xF2   0x4669             MOV      R1,SP
   \       0xF4   0x0020             MOVS     R0,R4
   \       0xF6   0x.... 0x....      BL       GPIO_Init
     92          }
   \       0xFA   0xBD13             POP      {R0,R1,R4,PC}
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void USART1_Init(void)
     95          {
   \                     USART1_Init: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
     96            USART_InitTypeDef USART1_InitStructure;
     97          
     98            // Enable the USART1 peripheral
     99            USART_Cmd(USART1, ENABLE);
   \        0x2   0x....             LDR.N    R4,??DataTable9_4
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       USART_Cmd
    100            
    101            // TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
    102            USART1_InitStructure.USART_BaudRate = 9600;
   \        0xC   0xF44F 0x5016      MOV      R0,#+9600
   \       0x10   0x9000             STR      R0,[SP, #+0]
    103            USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    104            USART1_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
   \       0x18   0x200C             MOVS     R0,#+12
   \       0x1A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    105            USART1_InitStructure.USART_Parity = USART_Parity_No;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    106            USART1_InitStructure.USART_StopBits = USART_StopBits_1;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    107            USART1_InitStructure.USART_WordLength = USART_WordLength_8b;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    108            
    109            USART_Init(USART1, &USART1_InitStructure);
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x.... 0x....      BL       USART_Init
    110            
    111            // TODO: Enable the USART1 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
    112            USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	
   \       0x38   0x2201             MOVS     R2,#+1
   \       0x3A   0xF240 0x5125      MOVW     R1,#+1317
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x.... 0x....      BL       USART_ITConfig
    113          }
   \       0x44   0xBD1F             POP      {R0-R4,PC}
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void USART2_Init(void)
    116          {
   \                     USART2_Init: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
    117            USART_InitTypeDef USART2_InitStructure;
    118          
    119            // Enable the USART2 peripheral
    120            USART_Cmd(USART2, ENABLE);
   \        0x2   0x....             LDR.N    R4,??DataTable9_5
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       USART_Cmd
    121            
    122            // TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
    123            USART2_InitStructure.USART_BaudRate = 9600;
   \        0xC   0xF44F 0x5016      MOV      R0,#+9600
   \       0x10   0x9000             STR      R0,[SP, #+0]
    124            USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    125            USART2_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
   \       0x18   0x200C             MOVS     R0,#+12
   \       0x1A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    126            USART2_InitStructure.USART_Parity = USART_Parity_No;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    127            USART2_InitStructure.USART_StopBits = USART_StopBits_1;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    128            USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    129            
    130            USART_Init(USART2, &USART2_InitStructure);
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x.... 0x....      BL       USART_Init
    131            
    132            // TODO: Enable the USART2 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
    133            USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \       0x38   0x2201             MOVS     R2,#+1
   \       0x3A   0xF240 0x5125      MOVW     R1,#+1317
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x.... 0x....      BL       USART_ITConfig
    134          }
   \       0x44   0xBD1F             POP      {R0-R4,PC}
    135          // microwave sensor config

   \                                 In section .text, align 2, keep-with-next
    136          void ADC1_Configure(void){
   \                     ADC1_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    137            ADC_InitTypeDef ADC;
    138            ADC.ADC_Mode = ADC_Mode_Independent;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x9000             STR      R0,[SP, #+0]
    139            ADC.ADC_ScanConvMode = DISABLE;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0004      STRB     R0,[SP, #+4]
    140            ADC.ADC_ContinuousConvMode = ENABLE;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xF88D 0x0005      STRB     R0,[SP, #+5]
    141            ADC.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \       0x14   0xF45F 0x2060      MOVS     R0,#+917504
   \       0x18   0x9002             STR      R0,[SP, #+8]
    142            ADC.ADC_DataAlign = ADC_DataAlign_Right;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9003             STR      R0,[SP, #+12]
    143            ADC.ADC_NbrOfChannel = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xF88D 0x0010      STRB     R0,[SP, #+16]
    144            
    145            ADC_Init(ADC1, &ADC);
   \       0x24   0x....             LDR.N    R4,??DataTable9_6
   \       0x26   0x4669             MOV      R1,SP
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       ADC_Init
    146            
    147            ADC_RegularChannelConfig(ADC1, ADC_Channel_12,1, ADC_SampleTime_239Cycles5);
   \       0x2E   0x2307             MOVS     R3,#+7
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x210C             MOVS     R1,#+12
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       ADC_RegularChannelConfig
    148            //ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
    149            
    150            ADC_DMACmd(ADC1, ENABLE);
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       ADC_DMACmd
    151            ADC_Cmd(ADC1, ENABLE);
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       ADC_Cmd
    152            
    153            ADC_ResetCalibration(ADC1);
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0x.... 0x....      BL       ADC_ResetCalibration
    154            while (ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADC1_Configure_0: (+1)
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD1FA             BNE.N    ??ADC1_Configure_0
    155            ADC_StartCalibration(ADC1);
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0x.... 0x....      BL       ADC_StartCalibration
    156            while(ADC_GetCalibrationStatus(ADC1));
   \                     ??ADC1_Configure_1: (+1)
   \       0x60   0x0020             MOVS     R0,R4
   \       0x62   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD1FA             BNE.N    ??ADC1_Configure_1
    157            ADC_SoftwareStartConvCmd(ADC1,ENABLE);
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0x0020             MOVS     R0,R4
   \       0x6E   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    158          }
   \       0x72   0xB006             ADD      SP,SP,#+24
   \       0x74   0xBD10             POP      {R4,PC}
    159          // microwave sensor config

   \                                 In section .text, align 2, keep-with-next
    160          void DMA1_Configure(void){
   \                     DMA1_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB08B             SUB      SP,SP,#+44
    161            DMA_InitTypeDef DMA_Instructure;
    162            DMA_DeInit(DMA1_Channel1);
   \        0x4   0x....             LDR.N    R4,??DataTable9_7
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       DMA_DeInit
    163            DMA_Instructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
   \        0xC   0x....             LDR.N    R0,??DataTable9_8
   \        0xE   0x9000             STR      R0,[SP, #+0]
    164            DMA_Instructure.DMA_MemoryBaseAddr = (uint32_t)distance;
   \       0x10   0x....             LDR.N    R0,??DataTable9_9
   \       0x12   0x9001             STR      R0,[SP, #+4]
    165            DMA_Instructure.DMA_Mode = DMA_Mode_Circular;
   \       0x14   0x2020             MOVS     R0,#+32
   \       0x16   0x9008             STR      R0,[SP, #+32]
    166            DMA_Instructure.DMA_Priority = DMA_Priority_High;
   \       0x18   0xF44F 0x5000      MOV      R0,#+8192
   \       0x1C   0x9009             STR      R0,[SP, #+36]
    167            DMA_Instructure.DMA_BufferSize = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0x9003             STR      R0,[SP, #+12]
    168            DMA_Instructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x9002             STR      R0,[SP, #+8]
    169            DMA_Instructure.DMA_M2M = DMA_M2M_Disable;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x900A             STR      R0,[SP, #+40]
    170            DMA_Instructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   \       0x2A   0xF44F 0x6000      MOV      R0,#+2048
   \       0x2E   0x9007             STR      R0,[SP, #+28]
    171            DMA_Instructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   \       0x30   0xF44F 0x7000      MOV      R0,#+512
   \       0x34   0x9006             STR      R0,[SP, #+24]
    172            DMA_Instructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x9005             STR      R0,[SP, #+20]
    173            DMA_Instructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x9004             STR      R0,[SP, #+16]
    174            DMA_Init(DMA1_Channel1, &DMA_Instructure);
   \       0x3E   0x4669             MOV      R1,SP
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       DMA_Init
    175            DMA_Cmd(DMA1_Channel1, ENABLE); 
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x.... 0x....      BL       DMA_Cmd
    176          }
   \       0x4E   0xB00C             ADD      SP,SP,#+48
   \       0x50   0xBD10             POP      {R4,PC}
    177          
    178          // acc sensor config

   \                                 In section .text, align 2, keep-with-next
    179          void ADC3_Configure(void){
   \                     ADC3_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    180            ADC_InitTypeDef ADC;
    181            ADC.ADC_Mode = ADC_Mode_Independent;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x9000             STR      R0,[SP, #+0]
    182            ADC.ADC_ScanConvMode = DISABLE;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0004      STRB     R0,[SP, #+4]
    183            ADC.ADC_ContinuousConvMode = ENABLE;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xF88D 0x0005      STRB     R0,[SP, #+5]
    184            ADC.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \       0x14   0xF45F 0x2060      MOVS     R0,#+917504
   \       0x18   0x9002             STR      R0,[SP, #+8]
    185            ADC.ADC_DataAlign = ADC_DataAlign_Right;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9003             STR      R0,[SP, #+12]
    186            ADC.ADC_NbrOfChannel = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xF88D 0x0010      STRB     R0,[SP, #+16]
    187            ADC_Init(ADC3, &ADC);
   \       0x24   0x....             LDR.N    R4,??DataTable9_10
   \       0x26   0x4669             MOV      R1,SP
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       ADC_Init
    188            
    189            ADC_RegularChannelConfig(ADC3, ADC_Channel_12,1, ADC_SampleTime_239Cycles5);
   \       0x2E   0x2307             MOVS     R3,#+7
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x210C             MOVS     R1,#+12
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       ADC_RegularChannelConfig
    190            ADC_DMACmd(ADC3, ENABLE);
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       ADC_DMACmd
    191            ADC_Cmd(ADC3, ENABLE);
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       ADC_Cmd
    192            
    193            ADC_ResetCalibration(ADC3);
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0x.... 0x....      BL       ADC_ResetCalibration
    194            while (ADC_GetResetCalibrationStatus(ADC3));
   \                     ??ADC3_Configure_0: (+1)
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD1FA             BNE.N    ??ADC3_Configure_0
    195            ADC_StartCalibration(ADC3);
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0x.... 0x....      BL       ADC_StartCalibration
    196            while(ADC_GetCalibrationStatus(ADC3));
   \                     ??ADC3_Configure_1: (+1)
   \       0x60   0x0020             MOVS     R0,R4
   \       0x62   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD1FA             BNE.N    ??ADC3_Configure_1
    197            ADC_SoftwareStartConvCmd(ADC3,ENABLE);
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0x0020             MOVS     R0,R4
   \       0x6E   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    198          }
   \       0x72   0xB006             ADD      SP,SP,#+24
   \       0x74   0xBD10             POP      {R4,PC}
    199          
    200          // acc sensor config

   \                                 In section .text, align 2, keep-with-next
    201          void DMA2_Configure(void){
   \                     DMA2_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB08B             SUB      SP,SP,#+44
    202            DMA_InitTypeDef DMA_Instructure;
    203            DMA_DeInit(DMA2_Channel5);
   \        0x4   0x....             LDR.N    R4,??DataTable9_11
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       DMA_DeInit
    204            DMA_Instructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC3->DR;
   \        0xC   0x....             LDR.N    R0,??DataTable9_12
   \        0xE   0x9000             STR      R0,[SP, #+0]
    205            DMA_Instructure.DMA_MemoryBaseAddr = (uint32_t)acc;
   \       0x10   0x....             LDR.N    R0,??DataTable9_13
   \       0x12   0x9001             STR      R0,[SP, #+4]
    206            DMA_Instructure.DMA_Mode = DMA_Mode_Circular;
   \       0x14   0x2020             MOVS     R0,#+32
   \       0x16   0x9008             STR      R0,[SP, #+32]
    207            DMA_Instructure.DMA_Priority = DMA_Priority_High;
   \       0x18   0xF44F 0x5000      MOV      R0,#+8192
   \       0x1C   0x9009             STR      R0,[SP, #+36]
    208            DMA_Instructure.DMA_BufferSize = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0x9003             STR      R0,[SP, #+12]
    209            DMA_Instructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x9002             STR      R0,[SP, #+8]
    210            DMA_Instructure.DMA_M2M = DMA_M2M_Disable;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x900A             STR      R0,[SP, #+40]
    211            DMA_Instructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   \       0x2A   0xF44F 0x6000      MOV      R0,#+2048
   \       0x2E   0x9007             STR      R0,[SP, #+28]
    212            DMA_Instructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   \       0x30   0xF44F 0x7000      MOV      R0,#+512
   \       0x34   0x9006             STR      R0,[SP, #+24]
    213            DMA_Instructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x9005             STR      R0,[SP, #+20]
    214            DMA_Instructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x9004             STR      R0,[SP, #+16]
    215            DMA_Init(DMA2_Channel5, &DMA_Instructure);
   \       0x3E   0x4669             MOV      R1,SP
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       DMA_Init
    216            DMA_Cmd(DMA2_Channel5, ENABLE); 
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x.... 0x....      BL       DMA_Cmd
    217          }
   \       0x4E   0xB00C             ADD      SP,SP,#+48
   \       0x50   0xBD10             POP      {R4,PC}
    218          // servo motor config

   \                                 In section .text, align 2, keep-with-next
    219          void TIM2_Configure(void)
    220          {
   \                     TIM2_Configure: (+1)
   \        0x0   0xB500             PUSH     {LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
    221            printf("Setup\n");
                   ^
Warning[Pe223]: function "printf" declared implicitly
   \        0x4   0x....             LDR.N    R0,??DataTable9_14
   \        0x6   0x.... 0x....      BL       printf
    222            TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    223            TIM_OCInitTypeDef TIM_OCInitStructure;
    224            
    225            TIM_TimeBaseStructure.TIM_Period = 10000; 
   \        0xA   0xF242 0x7010      MOVW     R0,#+10000
   \        0xE   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    226            TIM_TimeBaseStructure.TIM_Prescaler = 7200 / 50; // 10ms == 100Hz = 10000us
   \       0x12   0x2090             MOVS     R0,#+144
   \       0x14   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    227            TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    228            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x1E   0x2010             MOVS     R0,#+16
   \       0x20   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    229            TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \       0x24   0x4669             MOV      R1,SP
   \       0x26   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x2A   0x.... 0x....      BL       TIM_TimeBaseInit
    230            
    231            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x2E   0x2060             MOVS     R0,#+96
   \       0x30   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    232            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    233            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    234            TIM_OCInitStructure.TIM_Pulse = 600; // us
   \       0x40   0xF44F 0x7016      MOV      R0,#+600
   \       0x44   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    235            TIM_OC2Init(TIM2, &TIM_OCInitStructure);
   \       0x48   0xA903             ADD      R1,SP,#+12
   \       0x4A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x4E   0x.... 0x....      BL       TIM_OC2Init
    236            TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Disable);
   \       0x52   0x2100             MOVS     R1,#+0
   \       0x54   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x58   0x.... 0x....      BL       TIM_OC2PreloadConfig
    237            
    238            TIM_ARRPreloadConfig(TIM2, ENABLE);
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x62   0x.... 0x....      BL       TIM_ARRPreloadConfig
    239            TIM_Cmd(TIM2, ENABLE);
   \       0x66   0x2101             MOVS     R1,#+1
   \       0x68   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x6C   0x.... 0x....      BL       TIM_Cmd
    240          }
   \       0x70   0xB007             ADD      SP,SP,#+28
   \       0x72   0xBD00             POP      {PC}
    241          
    242          // motor config

   \                                 In section .text, align 2, keep-with-next
    243          void TIM3_Configure(void) {
   \                     TIM3_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
    244            TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    245            TIM_OCInitTypeDef TIM_OCInitStructure;
    246            
    247            TIM_TimeBaseStructure.TIM_Period = 10000; 
   \        0x4   0xF242 0x7010      MOVW     R0,#+10000
   \        0x8   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    248            TIM_TimeBaseStructure.TIM_Prescaler = 7200 / 100; // 10ms
   \        0xC   0x2048             MOVS     R0,#+72
   \        0xE   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    249            TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    250            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x18   0x2010             MOVS     R0,#+16
   \       0x1A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    251            TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
   \       0x1E   0x....             LDR.N    R4,??DataTable9_15
   \       0x20   0xA904             ADD      R1,SP,#+16
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       TIM_TimeBaseInit
    252          
    253            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x28   0x2060             MOVS     R0,#+96
   \       0x2A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    254            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    255            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    256            TIM_OCInitStructure.TIM_Pulse = 0; // us
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    257            TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \       0x40   0x4669             MOV      R1,SP
   \       0x42   0x0020             MOVS     R0,R4
   \       0x44   0x.... 0x....      BL       TIM_OC3Init
    258            TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
   \       0x48   0x2100             MOVS     R1,#+0
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0x.... 0x....      BL       TIM_OC3PreloadConfig
    259            
    260            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x50   0x2060             MOVS     R0,#+96
   \       0x52   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    261            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    262            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x5C   0x2001             MOVS     R0,#+1
   \       0x5E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    263            TIM_OCInitStructure.TIM_Pulse = 0; // us
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    264            TIM_OC4Init(TIM3, &TIM_OCInitStructure);
   \       0x68   0x4669             MOV      R1,SP
   \       0x6A   0x0020             MOVS     R0,R4
   \       0x6C   0x.... 0x....      BL       TIM_OC4Init
    265            TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Disable);
   \       0x70   0x2100             MOVS     R1,#+0
   \       0x72   0x0020             MOVS     R0,R4
   \       0x74   0x.... 0x....      BL       TIM_OC4PreloadConfig
    266            
    267            TIM_ARRPreloadConfig(TIM3, ENABLE);
   \       0x78   0x2101             MOVS     R1,#+1
   \       0x7A   0x0020             MOVS     R0,R4
   \       0x7C   0x.... 0x....      BL       TIM_ARRPreloadConfig
    268            TIM_Cmd(TIM3, ENABLE);
   \       0x80   0x2101             MOVS     R1,#+1
   \       0x82   0x0020             MOVS     R0,R4
   \       0x84   0x.... 0x....      BL       TIM_Cmd
    269          }
   \       0x88   0xB008             ADD      SP,SP,#+32
   \       0x8A   0xBD10             POP      {R4,PC}
    270          

   \                                 In section .text, align 2, keep-with-next
    271          void NVIC_Configure(void) {
   \                     NVIC_Configure: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
    272            NVIC_InitTypeDef NVIC_InitStructure_UART1;
    273            NVIC_InitTypeDef NVIC_InitStructure_UART2;
    274            
    275            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
   \        0x2   0xF44F 0x60E0      MOV      R0,#+1792
   \        0x6   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    276            
    277            // UART1
    278            // 'NVIC_EnableIRQ' is only required for USART setting
    279            NVIC_EnableIRQ(USART1_IRQn);
   \        0xA   0x2025             MOVS     R0,#+37
   \        0xC   0x.... 0x....      BL       __NVIC_EnableIRQ
    280            NVIC_InitStructure_UART1.NVIC_IRQChannel = USART1_IRQn;
   \       0x10   0x2025             MOVS     R0,#+37
   \       0x12   0xF88D 0x0004      STRB     R0,[SP, #+4]
    281            NVIC_InitStructure_UART1.NVIC_IRQChannelPreemptionPriority = 0;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF88D 0x0005      STRB     R0,[SP, #+5]
    282            NVIC_InitStructure_UART1.NVIC_IRQChannelSubPriority = 0;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xF88D 0x0006      STRB     R0,[SP, #+6]
    283            NVIC_InitStructure_UART1.NVIC_IRQChannelCmd = ENABLE;
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xF88D 0x0007      STRB     R0,[SP, #+7]
    284            NVIC_Init(&NVIC_InitStructure_UART1);
   \       0x28   0xA801             ADD      R0,SP,#+4
   \       0x2A   0x.... 0x....      BL       NVIC_Init
    285           
    286            // UART2
    287            // 'NVIC_EnableIRQ' is only required for USART setting
    288            NVIC_EnableIRQ(USART2_IRQn);
   \       0x2E   0x2026             MOVS     R0,#+38
   \       0x30   0x.... 0x....      BL       __NVIC_EnableIRQ
    289            NVIC_InitStructure_UART2.NVIC_IRQChannel = USART2_IRQn;
   \       0x34   0x2026             MOVS     R0,#+38
   \       0x36   0xF88D 0x0000      STRB     R0,[SP, #+0]
    290            NVIC_InitStructure_UART2.NVIC_IRQChannelPreemptionPriority = 1;
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    291            NVIC_InitStructure_UART2.NVIC_IRQChannelSubPriority = 0;
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0xF88D 0x0002      STRB     R0,[SP, #+2]
    292            NVIC_InitStructure_UART2.NVIC_IRQChannelCmd = ENABLE;
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0xF88D 0x0003      STRB     R0,[SP, #+3]
    293            NVIC_Init(&NVIC_InitStructure_UART2);
   \       0x4C   0x4668             MOV      R0,SP
   \       0x4E   0x.... 0x....      BL       NVIC_Init
    294          }
   \       0x52   0xBD07             POP      {R0-R2,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x4001'1000        DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x4001'3800        DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x4000'4400        DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x4001'2400        DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x4002'0008        DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \        0x0   0x4001'244C        DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \        0x0   0x....'....        DC32     distance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \        0x0   0x4001'3C00        DC32     0x40013c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \        0x0   0x4002'0458        DC32     0x40020458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \        0x0   0x4001'3C4C        DC32     0x40013c4c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \        0x0   0x....'....        DC32     acc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x53 0x65          DC8 "Setup\012"

   \              0x74 0x75    

   \              0x70 0x0A    

   \              0x00
   \        0x7                      DS8 1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ADC1_Configure
        32   -> ADC_Cmd
        32   -> ADC_DMACmd
        32   -> ADC_GetCalibrationStatus
        32   -> ADC_GetResetCalibrationStatus
        32   -> ADC_Init
        32   -> ADC_RegularChannelConfig
        32   -> ADC_ResetCalibration
        32   -> ADC_SoftwareStartConvCmd
        32   -> ADC_StartCalibration
      32   ADC3_Configure
        32   -> ADC_Cmd
        32   -> ADC_DMACmd
        32   -> ADC_GetCalibrationStatus
        32   -> ADC_GetResetCalibrationStatus
        32   -> ADC_Init
        32   -> ADC_RegularChannelConfig
        32   -> ADC_ResetCalibration
        32   -> ADC_SoftwareStartConvCmd
        32   -> ADC_StartCalibration
      56   DMA1_Configure
        56   -> DMA_Cmd
        56   -> DMA_DeInit
        56   -> DMA_Init
      56   DMA2_Configure
        56   -> DMA_Cmd
        56   -> DMA_DeInit
        56   -> DMA_Init
      16   GPIO_Configure
        16   -> GPIO_Init
      16   NVIC_Configure
        16   -> NVIC_Init
        16   -> NVIC_PriorityGroupConfig
        16   -> __NVIC_EnableIRQ
       8   RCC_Configure
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      32   TIM2_Configure
        32   -> TIM_ARRPreloadConfig
        32   -> TIM_Cmd
        32   -> TIM_OC2Init
        32   -> TIM_OC2PreloadConfig
        32   -> TIM_TimeBaseInit
        32   -> printf
      40   TIM3_Configure
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_OC3Init
        40   -> TIM_OC3PreloadConfig
        40   -> TIM_OC4Init
        40   -> TIM_OC4PreloadConfig
        40   -> TIM_TimeBaseInit
      24   USART1_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
      24   USART2_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       8  ?_0
     118  ADC1_Configure
     118  ADC3_Configure
      82  DMA1_Configure
      82  DMA2_Configure
     252  GPIO_Configure
      84  NVIC_Configure
     100  RCC_Configure
     116  TIM2_Configure
     140  TIM3_Configure
      70  USART1_Init
      70  USART2_Init
      30  __NVIC_EnableIRQ
       4  acc
       4  distance

 
     8 bytes in section .bss
     8 bytes in section .rodata
 1'326 bytes in section .text
 
 1'326 bytes of CODE  memory
     8 bytes of CONST memory
     8 bytes of DATA  memory

Errors: none
Warnings: 1
